openapi: 3.0.0
info:
  title: Looms POS API
  version: 1.0.0
paths:
  /orders:
    post:
      summary: Create a new order
      tags:
        - Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - merchantId
              properties:
                userId:
                  type: string
                  format: uuid
                merchantId:
                  type: string
                  format: uuid
                customerId:
                  type: string
                  format: uuid
                orderItems:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    get:
      summary: List orders
      tags:
        - Order
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: status
          schema:
            type: string
            enum: [open, closed, canceled, refunded]
          description: Filter orders by status
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date
          description: Filter orders created on or after this date
        - in: query
          name: dateTo
          schema:
            type: string
            format: date
          description: Filter orders created on or before this date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of orders matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
                  orders:
                    items:
                      $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
          
  /orders/{orderId}/orderItems/{orderItemId}:
    put:
      summary: Update an existing order item
      tags:
        - Order item
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: orderItemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete order item
      tags:
        - Order item
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: orderItemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order item deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
          
  /orders/{orderId}/orderItems:
    post:
      summary: Add item to an existing order
      security:
        - IdempotencyKey: []
      tags:
        - Order item
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                merchantId:
                  type: string
                  format: uuid
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/OrderItem'
                      quantity:
                        type: integer
                        minimum: 1
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
    get:
      summary: Get order details
      tags:
        - Order item
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
          
  /orders/{orderId}:
    delete:
      summary: Delete an order
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
    put:
      summary: Update an order
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
            
  /orders/{orderId}/cancel:
    post:
      summary: Cancel an order
      security:
        - IdempotencyKey: []
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order canceled successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
  /orders/{orderId}/transactions:
    post:
      summary: Add a transaction to an order
      security:
        - IdempotencyKey: []
      tags:
        - Transaction
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '422':
          description: Order cannot accept more transactions
        '500':
          description: Internal server error 
  /orders/{orderId}/tip:
    patch:
      summary: Add or update tip for an order
      security:
        - IdempotencyKey: []
      tags:
        - Transaction
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tipAmount:
                  type: number
                  format: currency
      responses:
        '200':
          description: Tip added or updated successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
  /orders/{orderId}/transactions/{transactionId}/refund:
    patch:
      summary: Refund a transaction
      security:
        - IdempotencyKey: []
      tags:
        - Transaction
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Refund completed successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order or transaction not found
        '500':
          description: Internal server error 
          
  /orders/{orderId}/receipt:
    get:
      summary: Get order receipt
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: verbose
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Receipt retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order not found
        '500':
          description: Internal server error 
  /reservations:
    post:
      summary: Create a new reservation
      security:
        - IdempotencyKey: []
      tags:
        - Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /reservations/{reservationId}:
    put:
      summary: Update a reservation
      tags:
        - Reservation
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Reservation updated or canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Reservation not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete a reservation
      tags:
        - Reservation
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Reservation deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Reservation not found
        '500':
          description: Internal server error 
          
  /reservations/{reservationId}/cancel:
    put:
      summary: Cancel a reservation
      tags:
        - Reservation
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Reservation canceled successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Reservation not found
        '500':
          description: Internal server error 
          
  /reservations/availableSlots:
    get:
      summary: Get available reservation slots
      tags:
        - Reservation
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: The date for which to retrieve available slots
        - name: serviceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the service for which to check availability
        - name: merchantId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the merchant for which to check availability
      responses:
        '200':
          description: Available slots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  availableSlots:
                    type: array
                    items:
                      type: object
                      properties:
                        startTime:
                          type: string
                          format: date-time
                        endTime:
                          type: string
                          format: date-time
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order or discount not found
        '500':
          description: Internal server error 
          
  /orders/{orderId}/discounts:
    post:
      summary: Apply a discount to an order
      security:
        - IdempotencyKey: []
      tags:
        - Discount
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discountId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Discount applied successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Order or discount not found
        '500':
          description: Internal server error 
          
  /inventory:
    get:
      summary: Get inventory list
      tags:
        - Inventory
      parameters:
        - name: merchantId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: quantity
          schema:
            type: number
          description: Filter inventory items by their quantity
        - in: query
          name: dateUpdated
          schema:
            type: string
            format: date
          description: Filter inventory items by when they were last updated
      responses:
        '200':
          description: Inventory list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Inventory'
                  total:
                    type: integer
                    description: Total number of inventory items matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Add inventory item
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: Inventory item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
          
  /inventory/{inventoryId}:
    get:
      summary: Get inventory item
      tags:
        - Inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Inventory item retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Inventory item not found
        '500':
          description: Internal server error 
    put:
      summary: Update inventory item
      tags:
        - Inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Inventory item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Inventory item not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete inventory item
      tags:
        - Inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Inventory item deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
          
  /inventoryLog:
    post:
      summary: Create a new inventory log entry
      tags:
        - Inventory log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryLog'
      responses:
        '200':
          description: Inventory log entry created successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
    get:
      summary: Get inventory log list
      tags:
        - Inventory log
      parameters:
        - name: merchantId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: productId
          schema:
            type: string
            format: uuid
        - in: query
          name: orderId
          schema:
            type: string
            format: uuid
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Inventory list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryLog'
                  total:
                    type: integer
                    description: Total number of inventory items matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
          
  /inventoryLog/{logId}:
    get:
      summary: Retrieve inventory log entry
      tags:
        - Inventory log
      parameters:
        - in: path
          name: logId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Inventory log entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryLog'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Inventory item not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete inventory log entry
      tags:
        - Inventory log
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Inventory log entry deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
          
  /taxes:
    get:
      summary: Get tax list
      tags:
        - Tax
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: name
          schema:
            type: string
          description: Filter tax by the name
      responses:
        '200':
          description: Tax list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Charge'
                  total:
                    type: integer
                    description: Total number of taxes matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new tax
      tags:
        - Tax
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
      responses:
        '201':
          description: Tax created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
          
  /taxes/{taxId}:
    put:
      summary: Update tax
      tags:
        - Tax
      parameters:
        - name: taxId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
      responses:
        '200':
          description: Tax updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Tax not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete tax
      tags:
        - Tax
      parameters:
        - name: taxId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Tax deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Tax not found
        '500':
          description: Internal server error 
  /serviceCharges:
    get:
      summary: Get service charge list
      tags:
        - Service charge
      responses:
        '200':
          description: Service charge list retrieved successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new service charge
      tags:
        - Service charge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
      responses:
        '201':
          description: Service charge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /serviceCharges/{serviceChargeId}:
    put:
      summary: Update service charge
      tags:
        - Service charge
      parameters:
        - name: serviceChargeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
      responses:
        '200':
          description: Service charge updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Service charge not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete service charge
      tags:
        - Service charge
      parameters:
        - name: serviceChargeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Service charge deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Service charge not found
        '500':
          description: Internal server error 
          
  /products:
    get:
      summary: Get product list
      tags:
        - Product
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: name
          schema:
            type: string
          description: Filter products by name
        - in: query
          name: price
          schema:
            type: number
            format: float
          description: Filter prroducst by price
      responses:
        '200':
          description: Product list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                    description: Total number of products matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new product
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /products/{productId}:
    put:
      summary: Update product
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Product not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete product
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Product not found
        '500':
          description: Internal server error 
  /products/{productId}/variations:
    post:
      summary: Add product variation
      tags:
        - Product variation
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariation'
      responses:
        '201':
          description: Product variation added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /products/{productId}/variations/{variationId}:
    put:
      summary: Update product variation
      tags:
        - Product variation
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: variationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariation'
      responses:
        '200':
          description: Product variation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Product or variation not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete product variation
      tags:
        - Product variation
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: variationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product variation deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Product or variation not found
        '500':
          description: Internal server error 
  /services:
    get:
      summary: Get service list
      tags:
        - Service
      responses:
        '200':
          description: Service list retrieved successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new service
      tags:
        - Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /services/{serviceId}:
    put:
      summary: Update service
      tags:
        - Service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Service not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete service
      tags:
        - Service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Service deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Service not found
        '500':
          description: Internal server error 
  /discounts:
    get:
      summary: Get discount list
      tags:
        - Discount
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: value
          schema:
            type: number
            format: float
          description: Filter discount value
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date
          description: Filter discount which are valid from
        - in: query
          name: dateTo
          schema:
            type: string
            format: date
          description: Filter discount which are valid to
      responses:
        '200':
          description: Discount list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
                  total:
                    type: integer
                    description: Total number of discounts matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new discount
      tags:
        - Discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '201':
          description: Discount created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /discounts/{discountId}:
    put:
      summary: Update discount
      tags:
        - Discount
      parameters:
        - name: discountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Discount updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete discount
      tags:
        - Discount
      parameters:
        - name: discountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Discount deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Discount not found
        '500':
          description: Internal server error 
  /users:
    get:
      summary: Get user list
      tags:
        - User
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: The number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: role
          schema:
            type: string
            enum: [owner, employee, admin]
          description: Filter user by their role
        - in: query
          name: firstname
          schema:
            type: string
          description: Filter user by their first name 
        - in: query
          name: lastname
          schema:
            type: string
          description: Filter user by their last name 
      responses:
        '200':
          description: User list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of orders matching the filter criteria
                  offset:
                    type: integer
                    description: The offset used in the request
                  limit:
                    type: integer
                    description: The limit used in the request
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
    post:
      summary: Create new user
      security:
        - IdempotencyKey: []
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '500':
          description: Internal server error 
  /users/{userId}:
    put:
      summary: Update user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: User not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: User not found
        '500':
          description: Internal server error 
          
  /merchants:
    post:
      summary: Create merchant
      security:
        - IdempotencyKey: []
      tags:
        - Merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
      responses:
        '200':
          description: Merchant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Merchant not found
        '500':
          description: Internal server error 
          
  /merchants/{merchantId}:
    put:
      summary: Update merchant
      tags:
        - Merchant
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
      responses:
        '200':
          description: Merchant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Merchant not found
        '500':
          description: Internal server error 
    get:
      summary: Retrieve merchant
      tags:
        - Merchant
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Merchant retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Merchant not found
        '500':
          description: Internal server error 
    delete:
      summary: Delete merchant
      tags:
        - Merchant
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Merchant deleted successfully
        '400':
          description: Invalid input
        '401':
          description: Authorization Required
        '403':
          description: User does not have sufficient access to perform this action
        '404':
          description: Merchant not found
        '500':
          description: Internal server error 
          
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderStatus:
          type: string
          enum: [open, closed, canceled, refunded]
        charges:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OrderCharge'
        items:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OrderItem'
        customer:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/Customer'
        transactions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Transaction'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
            
    OrderCharge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [tax, charge, tip, discount]
        name:
          type: string
        percent:
          type: number
          nullable: true
        amount:
          type: number
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
            
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderStatus:
          type: string
          enum: [open, closed, canceled, refunded]
        productId:
          type: string
          format: uuid
        variations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProductVariation'
        charges:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OrderCharge'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        externalRef:
          type: string
        paymentMethodType:
          type: string
          enum: [cash, debit, credit, giftcard]
        transactionStatus:
          type: string
          enum: [pending, completed, declined, refunded, disputed, abondoned]
        amount:
          type: number
          format: currency
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Receipt:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        subtotal:
          type: number
        taxes:
          type: number
        serviceCharge:
          type: number
        tip:
          type: number
        discounts:
          type: number
        total:
          type: number
          
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        service:
          type: object
          items:
            $ref: '#/components/schemas/Service'
        customer:
          type: object
          items:
            $ref: '#/components/schemas/Customer'
        appointedAt:
          type: string
          format: date-time
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
            
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        externalRef:
          type: string
          nullable: true
        phone:
          type: string
          format: uuid
        email:
          type: string
          format: email
        orders:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Order'
        reservations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Reservation'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
            
    Inventory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/Product'
        productVariations:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/ProductVariation'
        quantity:
          type: integer
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    InventoryLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/Product'
        productVariations:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/ProductVariation'
        order:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/Order'
        user:
          type: object
          nullable: true
          items:
            $ref: '#/components/schemas/User'
        adjustment:
          type: integer
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        variation:
          type: boolean
        name:
          type: string
        type: 
          type: string
          enum: [product, service]
        description:
          nullable: true
          type: string
        basePrice:
          type: number
        variations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProductVariation'
        category:
          type: object
          items:
            $ref: '#/components/schemas/ProductCategory'
        charges:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Charge'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
            
    ProductCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        products:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Product'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
            
    ProductVariation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          
    Charge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chargeType:
          type: string
          enum: [tax, service]
        chargescope:
          type: string
          enum: [order, product]
        name:
          type: string
        percent:
          type: number
          nullable: true
        amount:
          type: number
          nullable: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          format: currency
        duration:
          type: number
        charges:
          type: array
          items:
            $ref: '#/components/schemas/Charge'
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
            
    Discount:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        percent:
          type: number
          nullable: true
        amount:
          type: number
          nullable: true
        validFrom:
          type: string
          format: date-time
        validuntil:
          type: string
          format: date-time
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        roles:
          type: array
          items:
            type: string
        services:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Service'
        merchantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Merchant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        currency:
          type: string 
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postcode:
          type: string
        createdAt:
          type: string
          format: date-time
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
    IdempotencyKey:
      type: apiKey
      in: header
      name: Idempotency-Key
      description: A unique key to ensure idempotency of the request

security:
  - bearerAuth: []
  - IdempotencyKey: [] 
